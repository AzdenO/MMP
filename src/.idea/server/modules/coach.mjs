/**
 * @class Coach
 * @description The Coach class encapsulates the coaching logic, dealing with fetching the necessary reasoner parameters from
 * user services (player data) and passing this to the correct reasoner method, returning an object of the generated content
 * @version 0.4.0
 * @author Declan Roy Alan Wadsworth (drw8)
 */
export default class Coach{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Constructor for coach class that includes the class dependencies
     * @param {Object} reasoner The singleton instance of the reasoner class to provide AI content
     * @param {Object} service The singleton instance of user services to acccess player data
     */
    constructor(reasoner,service) {
        this.reasoner = reasoner;//gemini api wrapper class/object
        this.userservice = service;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method to get a charcter build suggestion for a certain activity
     * @param {string} activity_id An activity id that maps on the bungie API to a specific activity in the game
     * @param {string} character The character class to generate a build for
     * @returns {Promise<Object>} The content generated by the reasoner
     */
    async get_suggestions_by_activity(activity_id,character) {
        return await this.reasoner.act_build(
            this.userservice.getActivity(activity_id),
            {
                vault: await this.userservice.getVaultItems(this.getDisplayName()),
                character: await this.userservice.getCharacterConfiguration(this.getDisplayName()),
            },
            character
        );
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async getWeaponSkillsContent(statType){
        const stats = await this.userservice.getWeaponStats(this.getDisplayName(), true);
        const content = await this.reasoner.weaponSkills(
            stats
        );
        return content;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async getCharacterAnalysis(characterid){
        const configuration = await this.userservice.getCharacterConfiguration(this.getDisplayName(),characterid);
        const content = await this.reasoner.characterAnalysis(configuration);
        return content;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method to fetch from user service the players most recent activities
     * @param {string} characterid The character to fetch the recent activities for
     * @returns {Promise<Object>} Object of activity summaries
     */
    async getRecentActivities(characterid){

        return await this.userservice.getRecentActivities(
            this.getDisplayName(),
            characterid
        );
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Get the data by which the mentor service helps a player measure their improvement week on week
     * @returns {Promise<Object>} The data object
     */
    async getProgressionData(){
        return await this.userservice.getCoachData();
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method to combine player game data and the reasoner to produce targets generated by the reasoner
     * @returns {Promise<Object>} An object of targets
     */
    async getGeneratedTargets(){
        return await this.reasoner.generatedTargets(
            {
                weapon: await this.userservice.getWeaponStats(this.getDisplayName(), true),
            }
        )
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method to combine an activity summary and the reasoner to produce a coaching style analysis of a players performance
     * in an activity
     * @param {string} instanceid That maps to an activity on the bungie API
     * @param {string} characterid The character the player played as for this activity
     * @returns {Promise<Object>} The generated object from the reasoner
     */
    async getActivityAnalysis(instanceid,characterid){
        const activity = await this.userservice.getActivitySummary(
            instanceid,
            characterid
        )
        return await this.reasoner.activityAnalysis(
            activity
        )
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method to have the reasoner generate an analysis of a players activity skills
     * @param characterid The character the player wants to return activity reports for
     * @returns {Promise<Object>} AI generated analysis of a players activity skills
     */
    async getActivitySkills(characterid){
        return await this.reasoner.activitySkills(
            await this.userservice.getAllPlayerActivityReports(this.getDisplayName(),characterid)
        );
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Method to have the reasoner generate content for a keyword mapping to a certain type such as activity, status effect, etc.
     * @param {string} keyword The keyword the user wants information on
     * @param {string} type The keywords type in the API provided knowledge base
     * @returns {Promise<Object>} The AI generated response
     */
    async getKnowledgeContent(keyword, type){
        return await this.reasoner.keywordDescription(
            keyword,
            type
        );
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getDisplayName(){
        return this.details.displayname;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getCharacters(){
        return this.details.characters;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getRefreshToken(){
        return this.details.refreshToken;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getAccessToken(){
        return this.details.accessToken;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getAccessExpiry(){
        return this.details.accessExpiry;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getRefreshExpiry(){
        return this.details.refresh_expiry;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getMemberType(){
        return this.details.membertype;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getMembershipId(){
        return this.details.membershipid;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    getCharacterIds(){
        return this.details.characters.characters[0][0];
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}